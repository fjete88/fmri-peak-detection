function [Ps, I_crit, u, Loc] = Table_peakFDR( Z, D, v, q, pTable, Loc )
%__________________________________________________________________________
% Computes p-values, the critical threshold and detected peaks using a table
% of p-values as generated by 'PvalueTable_heightDistr.m'
%
% Input:
% Z      - Field over R^D or if 'Loc' is provided this is a vector containing
%          the values of the local maxima!
% D      - dimension of the domain
% v      - pre-threshold for peaks
% q      - FDR control threshold (number between 0 and 1)
% pTable - table of p-values as generated by 'PvalueTable_heightDistr.m'
% Loc    - If this is provided these are the locations of the local maxima
%          and it is assumed that Z is a vector of local maxima instead of
%          a field! (optional)
%
% Output:
% Ps     - vector containing the p-values of the local maxima which are
%          larger than v
% I_crit - critical index for significant peaks, all i <= I_crit are
%          detections
% u      - height of smallest significant peak after FDR control
% Loc    - index location of the sorted p-values (use ind2sub on this vector
%          to obtain the coordinates of the peaks)
%__________________________________________________________________________
% References:
% Cheng, Dan, and Armin Schwartzman. "Multiple testing of local maxima for
%       detection of peaks in random fields." The Annals of Statistics 45.2
%       (2017): 529-556.
%__________________________________________________________________________
% Author: Fabian Telschow (ftelschow@ucsd.edu)
% Last changes: 06/19/2018
%__________________________________________________________________________
%
% Start of function
%
if nargin == 6
    % Check Input in case Loc is provided
    if length(size(Z))> 2 || (all(size(Z))==1 && D==2)
        error('Z, must be a vector containing the local maxima values, if Loc is provided.')
    end
elseif nargin == 5
    % Find local maxima above threshold
    Maxima   = zeros(size(Z));
    Imax     = imregionalmax(Z);
    % Cut off peaks at the boundary
    switch D
        case 2
           Maxima( 2:(end-1), 2:(end-1)) = Imax( 2:(end-1), 2:(end-1) );
        case 3
           Maxima( 2:(end-1), 2:(end-1), 2:(end-1)) = Imax( 2:(end-1), ...
                                                            2:(end-1), ...
                                                            2:(end-1));
    end
    Z        = Z( logical(Maxima) );
    I        = find(Z >= v);
    Z        = Z(I);

    % save location of the maxima
    Loc      = find(Maxima);
    Loc      = Loc(I);
else
    error('Please, input the appropriate number of input arguments.')
end

% get the parameters of the table
min = pTable(1,1);
max = pTable(end,1);
dv  = mean(diff(pTable(:,1)));

% compute length of index vector
maxIndex = length(min:dv:max);

% find index of threshold
if v < min
    Iv = 1;
elseif v > max
    Iv = maxIndex;
else
    Iv =  floor((v - min)/dv) + 1;
end

% compute the p values of the peaks using Proposition 6 CS(2017)
Fkappa_v = pTable(Iv,2);

% compute the index closest in the p-value table
IZ                = floor((Z - min)/dv) + 1;
IZ( IZ>maxIndex ) = maxIndex;
IZ( IZ<1 )        = 1;

% Find p-values in the table
Ps       = pTable(IZ,2)'/ Fkappa_v;

% sort p-values
[Ps, I] = sort(Ps);
Loc     = Loc(I);

%%%% Which peaks are the discoveries?
% Find FDR threshold 
S = length(Ps);
Fi = (1:S)/S*q;
% maximal index declaring detections after FDR
I_crit = find( Ps<= Fi, 1, 'last' );
u = Z(I_crit);